package gui;

import ddf.minim.Playable;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.TimerTask;
import java.util.Timer;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.event.ChangeListener;

/**
 * JPanel for controlling playback of an audio stream.
 * 
 * @author  Stefan Marks
 * @version 1.0 - 15.05.2013: Created
 */
public class PlaybackControlPanel extends javax.swing.JPanel
{
    private static final int STEPS_PER_SECOND = 10;
    
    /**
     * Creates a new playback control panel.
     */
    public PlaybackControlPanel()
    {
        initComponents();
        
        source = null;
        updateControls();
        
        TimerTask t = new TimerTask() {
            @Override
            public void run()
            {
                if ( (source != null) && source.isPlaying() )
                {
                    updateFromPlayback = true;
                    int pos = source.position();
                    sldTime.setValue(pos * STEPS_PER_SECOND / 1000);
                    lblTimecode.setText(String.format("%04d.%03d", pos / 1000, pos % 1000));
                    updateFromPlayback = false;
                } 
            }  
        };
        updateTimer = new Timer();
        updateTimer.scheduleAtFixedRate(t, 100, 100);        
        sldTime.addChangeListener(new SliderChangeListener());
    }

    /**
     * Attaches a playable object to this playback controller.
     * 
     * @param playable the playable object to control with this panel
     */
    public void attachToAudio(Playable playable)
    {
        this.source = playable;
        int len = source.length();
        sldTime.setMaximum(len * STEPS_PER_SECOND / 1000);
        sldTime.setValue(0);
        int idx = 0;
        while ( majTicks[idx] * 5 < len / 1000 ) { idx++; }
        sldTime.setMajorTickSpacing(majTicks[idx] * STEPS_PER_SECOND);
        sldTime.setMinorTickSpacing(minTicks[idx] * STEPS_PER_SECOND);
        int l = 0;
        Dictionary<Integer, JComponent> labels = new Hashtable<>();
        while ( l < len )
        {
            String  label = String.format("%d:%02d", (int) (l/(1000*60)), (l / 1000) % 60);
            Integer value = l * STEPS_PER_SECOND / 1000;
            labels.put(value, new JLabel(label));
            l += sldTime.getMajorTickSpacing() * 1000 / STEPS_PER_SECOND;
        }
        sldTime.setLabelTable(labels);
        lblTimecode.setText("0000.000");
        updateControls();
    }
    
    /**
     * Detaches the panel from the playable object.
     */
    public void detachFromAudio()
    {
        this.source = null;
        updateControls();
        sldTime.setValue(0);
        lblTimecode.setText("----.---");
    }
    
    private void updateControls()
    {
        btnRewind.setEnabled(source != null);
        btnPlay.setVisible((source != null) && !source.isPlaying());
        btnStop.setVisible((source != null) && source.isPlaying());
        sldTime.setEnabled(source != null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        sldTime = new javax.swing.JSlider();
        javax.swing.JPanel pnlButtons = new javax.swing.JPanel();
        lblTimecode = new javax.swing.JLabel();
        btnRewind = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        sldTime.setMajorTickSpacing(60);
        sldTime.setMinorTickSpacing(10);
        sldTime.setPaintLabels(true);
        sldTime.setPaintTicks(true);
        sldTime.setValue(0);
        add(sldTime, java.awt.BorderLayout.PAGE_START);

        pnlButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblTimecode.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        lblTimecode.setText("0000:000");
        pnlButtons.add(lblTimecode);

        btnRewind.setText("|<");
        btnRewind.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRewindPressed(evt);
            }
        });
        pnlButtons.add(btnRewind);

        btnPlay.setText(">");
        btnPlay.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPlayPressed(evt);
            }
        });
        pnlButtons.add(btnPlay);

        btnStop.setText("||");
        btnStop.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnStopPressed(evt);
            }
        });
        pnlButtons.add(btnStop);

        add(pnlButtons, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRewindPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRewindPressed
    {//GEN-HEADEREND:event_btnRewindPressed
        sldTime.setValue(0);
        updateControls();
    }//GEN-LAST:event_btnRewindPressed

    private void btnPlayPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayPressed
    {//GEN-HEADEREND:event_btnPlayPressed
        source.play(sldTime.getValue() * 1000 / STEPS_PER_SECOND);
        updateControls();
    }//GEN-LAST:event_btnPlayPressed

    private void btnStopPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStopPressed
    {//GEN-HEADEREND:event_btnStopPressed
        source.pause();
        updateControls();
    }//GEN-LAST:event_btnStopPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRewind;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblTimecode;
    private javax.swing.JSlider sldTime;
    // End of variables declaration//GEN-END:variables

    private class SliderChangeListener implements ChangeListener
    {
        @Override
        public void stateChanged(javax.swing.event.ChangeEvent evt)
        {
            if ( updateFromPlayback ) return;
            int pos = sldTime.getValue() * 1000 / STEPS_PER_SECOND;
            if ( source != null )
            {
                if ( source.isPlaying() ) source.play(pos);
                else                      source.skip(pos - source.position());
            }
        }
    }

    Playable source;
    Timer    updateTimer;
    boolean  updateFromPlayback; 
    
    final int[] majTicks = {10, 60, 120, 240, 300, 600, 1200};
    final int[] minTicks = { 1,  5,  10,  20,  30,  60,  120};
}
